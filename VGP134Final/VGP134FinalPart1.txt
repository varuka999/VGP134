Part 1: (30%)
1) What is a lambda function?
    write a simple one
    

2) What are the two main elements of associative containers?
Value - the variable/s associated organized to a key
Key - The accessor variable is used to find the values that are 'stored' with that key.


3) In a vector, what is the difference between a std::map and std::unorderd_map?
Map has a key, unordered maps do not. 


4) How does a std::set function?
    Give an example when one can be used.
A set is a container that stores values. These values are ordered based on parameters (ints are ascending, strings alphabetical)
Sets also cannot store duplicates (if set of ints had value 3, trying to add 3 again won't do anything)


5) When would you use the different error handling options:
    - If Statement
    - Assert
    - Try-Catch
    If-statements are used for most logic flows. For example, if an int is out of a pre-determined range, one can use an if/else to get the intended outcome
    Assert is used to catch errors while debugging
    Try catch is used to catch runtime errors


6) What is the Call Stack?
    When and how can you use it?
    The call stack is a visualization of 'the stack'. Everytime a function is called, it is added to the stack.
    We can use it to navigate nested function calls to find out where/when things are happening.

7) What is std::move used for?
   std::move is used when we want to pass a value as an rvalue but we want to transfer its ownership within the function.
   
8) Write out the lvalue and rvalue references:
    - float speed = maxSpeed;
    - bool isDebug = true;
    - int totalEnemies = 10 + bonusEnemies;
    - SetLevelToLoad(1);
    - int studentsMark = totalMarks / totalAssignments;

    lvalue: speed, maxSpeed, isDebug, totalEnemies, bonusEnemis, studentsMark, totalMarks, totalAssignments
    rvalue: true, 10, (10 + bonusEnemies), 1, (totalMarks / TotalAssignments)


9) What are the benefits of multithreading?
It allows us to call multiple functions and have them run simulatneously. This can in certain instances reduce the time it would take to run the code.

10) What are three potential error conditions with multithreading?
If both functions are trying to access the same information at the same time, you could get incorrect information.
If both functions are modifying the same information, it would most likely lead to incorrect behaviour.
If both functions are dependant on each other to continue.
